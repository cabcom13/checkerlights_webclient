declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & (new () => {
    $slots: S;
});
declare const __VLS_component: import("vue").DefineComponent<{}, {
    $emit: (event: "dismiss" | "click:action", ...args: any[]) => void;
    borderClass: string;
    message: Record<string, any>;
    messageClass: string;
    messageActionClass: string;
    dense: boolean;
    iconPresets: Record<string, any>;
    $props: {
        readonly borderClass?: string;
        readonly message?: Record<string, any>;
        readonly messageClass?: string;
        readonly messageActionClass?: string;
        readonly dense?: boolean;
        readonly iconPresets?: Record<string, any>;
    };
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
type __VLS_TemplateResult = {
    slots: {
        "message-inner"?(_: {
            message: Record<string, any>;
        }): any;
        "message-icon"?(_: {
            message: Record<string, any>;
            icon: any;
        }): any;
        "message-badge"?(_: {
            message: Record<string, any>;
            count: any;
        }): any;
        "message-content"?(_: {
            message: Record<string, any>;
            title: any;
            text: any;
        }): any;
        "message-action"?(_: {
            message: Record<string, any>;
            isDismissible: any;
            dismiss: () => void;
        }): any;
        "message-close-icon"?(_: {
            message: Record<string, any>;
            isDimissible: any;
            isDismissible: any;
            dismiss: () => void;
        }): any;
    };
    refs: {};
    attrs: Partial<typeof __VLS_inheritedAttrs>;
};
declare var __VLS_inheritedAttrs: {};
//# sourceMappingURL=Vue3SnackbarMessage.vue.d.ts.map