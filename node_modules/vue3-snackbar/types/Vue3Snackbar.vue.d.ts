declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & (new () => {
    $slots: S;
});
declare const __VLS_component: import("vue").DefineComponent<{}, {
    $emit: (event: "click:action" | "added" | "dismissed" | "removed" | "cleared", ...args: any[]) => void;
    warning: string;
    error: string;
    info: string;
    success: string;
    top: boolean;
    bottom: boolean;
    left: boolean;
    right: boolean;
    reverse: boolean;
    messageActionClass: string;
    dense: boolean;
    iconPresets: Record<string, any>;
    messageTextColor: string;
    messageIconColor: string;
    attach: string | HTMLElement | Record<string, any>;
    border: string;
    backgroundOpacity: string | number;
    backgroundColor: string;
    baseBackgroundColor: string;
    zIndex: number;
    groups: boolean;
    shadow: boolean;
    dismissOnActionClick: boolean;
    messageClass?: string;
    duration?: string | number;
    limit?: number;
    $props: {
        readonly warning?: string;
        readonly error?: string;
        readonly info?: string;
        readonly success?: string;
        readonly top?: boolean;
        readonly bottom?: boolean;
        readonly left?: boolean;
        readonly right?: boolean;
        readonly reverse?: boolean;
        readonly messageActionClass?: string;
        readonly dense?: boolean;
        readonly iconPresets?: Record<string, any>;
        readonly messageTextColor?: string;
        readonly messageIconColor?: string;
        readonly attach?: string | HTMLElement | Record<string, any>;
        readonly border?: string;
        readonly backgroundOpacity?: string | number;
        readonly backgroundColor?: string;
        readonly baseBackgroundColor?: string;
        readonly zIndex?: number;
        readonly groups?: boolean;
        readonly shadow?: boolean;
        readonly dismissOnActionClick?: boolean;
        readonly messageClass?: string;
        readonly duration?: string | number;
        readonly limit?: number;
    };
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
type __VLS_TemplateResult = {
    slots: Partial<Record<NonNullable<string | number>, (_: any) => any>>;
    refs: {};
    attrs: Partial<typeof __VLS_inheritedAttrs>;
};
declare var __VLS_inheritedAttrs: {};
//# sourceMappingURL=Vue3Snackbar.vue.d.ts.map